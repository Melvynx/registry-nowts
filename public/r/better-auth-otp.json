{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "better-auth-otp",
  "type": "registry:component",
  "title": "Better Auth OTP",
  "description": "A component for signing in with email OTP.",
  "dependencies": [
    "motion",
    "react-use-measure",
    "@hookform/resolvers",
    "@tanstack/react-query"
  ],
  "registryDependencies": [
    "button",
    "input",
    "label",
    "textarea",
    "card",
    "input-otp",
    "sonner",
    "form"
  ],
  "files": [
    {
      "path": "registry/nowts/blocks/better-auth-otp/components/better-auth-otp.tsx",
      "content": "\"use client\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  InputOTP,\n  InputOTPGroup,\n  InputOTPSlot,\n} from \"@/components/ui/input-otp\";\nimport { authClient } from \"@/lib/auth-client\";\nimport { cn } from \"@/lib/utils\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { AnimatePresence, motion } from \"motion/react\";\nimport { useSearchParams } from \"next/navigation\";\nimport { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport useMeasure from \"react-use-measure\";\nimport { toast } from \"sonner\";\nimport { z } from \"zod\";\nimport { useCountdown } from \"../hooks/use-countdown\";\n\nconst LoginWithEmailOTPScheme = z.object({\n  email: z.string().email(),\n});\n\ntype LoginWithEmailOTPType = z.infer<typeof LoginWithEmailOTPScheme>;\n\nexport const SignInWithEmailOTP = (props: {\n  callbackUrl?: string;\n  email?: string;\n}) => {\n  const searchParams = useSearchParams();\n  const callbackUrl = searchParams.get(\"callbackUrl\");\n  const [otpEmail, setOtpEmail] = useState<string | null>(null);\n  const form = useForm({\n    resolver: zodResolver(LoginWithEmailOTPScheme),\n    defaultValues: {\n      email: props.email ?? \"\",\n    },\n  });\n  const [ref, bounds] = useMeasure();\n  const [direction, setDirection] = useState(1);\n\n  const signInMutation = useMutation({\n    mutationFn: async (values: LoginWithEmailOTPType) => {\n      const result = await authClient.emailOtp.sendVerificationOtp({\n        email: values.email,\n        type: \"sign-in\",\n      });\n      if (result.error) {\n        throw new Error(result.error.message);\n      }\n      return result.data;\n    },\n    onError: (error) => {\n      toast.error(error.message);\n    },\n    onSuccess: (_, values) => {\n      setOtpEmail(values.email);\n      setDirection(1);\n    },\n  });\n\n  const verifyOtpMutation = useMutation({\n    mutationFn: async (otp: string) => {\n      if (!otpEmail) {\n        throw new Error(\"Email is required\");\n      }\n\n      const result = await authClient.signIn.emailOtp({\n        email: otpEmail,\n        otp: otp,\n      });\n\n      if (result.error) {\n        throw new Error(result.error.message);\n      }\n\n      return result.data;\n    },\n    onError: (error) => {\n      toast.error(error.message);\n    },\n    onSuccess: () => {\n      toast.success(\"Signed in successfully\");\n      const cb = props.callbackUrl ?? \"/home\";\n      window.location.href = cb;\n    },\n  });\n\n  return (\n    <motion.div animate={{ height: bounds.height }}>\n      <div ref={ref}>\n        <AnimatePresence mode=\"wait\" custom={direction}>\n          {otpEmail ? (\n            <motion.div\n              key=\"otp-verification-form\"\n              variants={variants}\n              initial=\"initial\"\n              animate=\"active\"\n              exit=\"exit\"\n              transition={{ duration: 0.3 }}\n              custom={direction}\n            >\n              <OtpVerificationForm\n                email={otpEmail}\n                onVerify={verifyOtpMutation.mutate}\n                onResend={() => signInMutation.mutate({ email: otpEmail })}\n                isResendPending={signInMutation.isPending}\n                isVerifyPending={verifyOtpMutation.isPending}\n                onBack={() => {\n                  setDirection(-1);\n                  setOtpEmail(null);\n                }}\n              />\n            </motion.div>\n          ) : (\n            <motion.div\n              key=\"otp-email-form\"\n              variants={variants}\n              // initial=\"initial\"\n              animate=\"active\"\n              exit=\"exit\"\n              transition={{ duration: 0.3 }}\n              custom={direction}\n            >\n              <OtpEmailForm\n                onSubmit={(email) => signInMutation.mutate({ email })}\n                defaultEmail={form.getValues(\"email\")}\n                isPending={signInMutation.isPending}\n              />\n            </motion.div>\n          )}\n        </AnimatePresence>\n      </div>\n    </motion.div>\n  );\n};\n\nconst variants = {\n  initial: (direction: number) => {\n    return { x: `${100 * direction}px`, opacity: 0 };\n  },\n  active: { x: \"0%\", opacity: 1 },\n  exit: (direction: number) => {\n    return { x: `${-100 * direction}px`, opacity: 0 };\n  },\n};\n\nexport const OtpEmailForm = (props: {\n  onSubmit: (email: string) => void;\n  defaultEmail?: string;\n  isPending: boolean;\n}) => {\n  const form = useForm({\n    resolver: zodResolver(LoginWithEmailOTPScheme),\n    defaultValues: {\n      email: props.defaultEmail ?? \"\",\n    },\n  });\n\n  function onSubmit(values: LoginWithEmailOTPType) {\n    props.onSubmit(values.email);\n  }\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)}>\n        <FormField\n          control={form.control}\n          name=\"email\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Email</FormLabel>\n              <FormControl>\n                <Input placeholder=\"john@doe.com\" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <Button\n          disabled={form.formState.isSubmitting}\n          type=\"submit\"\n          className=\"w-full ring-offset-2 ring-offset-card\"\n        >\n          Sign in\n        </Button>\n      </form>\n    </Form>\n  );\n};\n\nexport const OtpVerificationForm = (props: {\n  onVerify: (otp: string) => void;\n  onResend: () => void;\n  isResendPending: boolean;\n  isVerifyPending: boolean;\n  email: string;\n  onBack: () => void;\n}) => {\n  const [value, setValue] = useState(\"\");\n\n  const setOtpValue = (otp: string) => {\n    setValue(otp);\n    if (otp.length === 6) {\n      props.onVerify(otp);\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col items-center gap-4 w-full\">\n      <p className=\"text-muted-foreground text-sm\">\n        Enter the code sent to your email{\" \"}\n        <span className=\"font-bold\">{props.email}</span>\n      </p>\n      <InputOTP\n        maxLength={6}\n        value={value}\n        onChange={setOtpValue}\n        className={cn({\n          \"animate-pulse\": props.isVerifyPending,\n        })}\n      >\n        <InputOTPGroup>\n          <InputOTPSlot index={0} />\n          <InputOTPSlot index={1} />\n          <InputOTPSlot index={2} />\n          <InputOTPSlot index={3} />\n          <InputOTPSlot index={4} />\n          <InputOTPSlot index={5} />\n        </InputOTPGroup>\n      </InputOTP>\n      <div className=\"flex items-center gap-2\">\n        <button\n          onClick={props.onBack}\n          className={cn(\"underline\", \"text-muted-foreground text-sm\")}\n        >\n          Edit email\n        </button>\n        <ResendOtpButton\n          isPending={props.isResendPending}\n          onResend={props.onResend}\n        />\n      </div>\n    </div>\n  );\n};\n\nconst ResendOtpButton = (props: {\n  isPending: boolean;\n  onResend: () => void;\n}) => {\n  const countdown = useCountdown(60);\n\n  return (\n    <button\n      onClick={() => {\n        countdown.reset();\n        props.onResend();\n      }}\n      disabled={props.isPending || !countdown.isCountdownFinished}\n      className={cn(\n        \"underline text-muted-foreground text-sm\",\n        {\n          \"animate-pulse\": props.isPending,\n        },\n        \"disabled:opacity-50\"\n      )}\n    >\n      Resend {countdown.count > 0 ? `(${countdown.count})` : \"\"}\n    </button>\n  );\n};\n",
      "type": "registry:component"
    },
    {
      "path": "registry/nowts/blocks/better-auth-otp/hooks/use-countdown.ts",
      "content": "import { useEffect, useState } from \"react\";\n\nexport const useCountdown = (initialCount: number) => {\n  const [count, setCount] = useState(initialCount);\n\n  useEffect(() => {\n    if (count <= 0) return;\n\n    const interval = setInterval(() => {\n      setCount((prev) => Math.max(0, prev - 1));\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, [count]);\n\n  return {\n    count,\n    isCountdownFinished: count <= 0,\n    reset: () => setCount(initialCount),\n  };\n};\n",
      "type": "registry:hook"
    }
  ]
}
